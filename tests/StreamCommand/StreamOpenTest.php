<?php
/*
 * This file is part of the flysystem-stream-wrapper package.
 *
 * (c) 2021-2021 m2m server software gmbh <tech@m2m.at>
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace M2MTech\FlysystemStreamWrapper\Tests\StreamCommand;

use League\Flysystem\UnableToReadFile;
use M2MTech\FlysystemStreamWrapper\Flysystem\StreamCommand\StreamOpenCommand;
use M2MTech\FlysystemStreamWrapper\Tests\FileCommand\DataProvider;
use PHPUnit\Framework\MockObject\MockObject;

class StreamOpenTest extends AbstractStreamCommandTest
{
    use DataProvider;

    /**
     * @dataProvider writeOnlyModeProvider
     * @dataProvider exclusiveWriteOnlyModeProvider
     * @dataProvider readWriteModeProvider
     * @dataProvider exclusiveReadWriteModeProvider
     */
    public function test(string $mode): void
    {
        $current = $this->getCurrent();

        $openedPath = '';
        $this->assertTrue(StreamOpenCommand::run(
            $current,
            self::TEST_PATH,
            $mode,
            STREAM_REPORT_ERRORS,
            $openedPath
        ));
        $this->assertSame('', $openedPath);

        $this->assertIsResource($current->handle);
    }

    public function testInvalidMode(): void
    {
        $current = $this->getCurrent();
        $openedPath = '';
        $this->assertFalse(@StreamOpenCommand::run(
            $current,
            self::TEST_PATH,
            'mb',
            STREAM_REPORT_ERRORS,
            $openedPath
        ));

        $this->expectError();
        $this->expectErrorMessage('Failed to open stream');
        StreamOpenCommand::run($current, self::TEST_PATH, 'xy', 0, $openedPath);
    }

    /**
     * @dataProvider readOnlyModeProvider
     */
    public function testReadOnly(string $mode): void
    {
        $current = $this->getCurrent();
        /** @var MockObject $filesystem */
        $filesystem = $current->filesystem;
        $filesystem->expects($this->once())
            ->method('readStream')
            ->with('test')
            ->willReturn(fopen('php://temp', $mode));

        $openedPath = '';
        $this->assertTrue(StreamOpenCommand::run(
            $current,
            self::TEST_PATH,
            $mode,
            STREAM_REPORT_ERRORS,
            $openedPath
        ));
    }

    public function testCouldNotGetResource(): void
    {
        $current = $this->getCurrent();

        $openedPath = '';
        $this->assertFalse(StreamOpenCommand::run(
            $current,
            self::TEST_PATH,
            'rb',
            0,
            $openedPath
        ));

        $this->expectError();
        $this->expectErrorMessage('No such file or directory');
        StreamOpenCommand::run(
            $current,
            self::TEST_PATH,
            'rb',
            STREAM_REPORT_ERRORS,
            $openedPath
        );
    }

    public function testReadFailed(): void
    {
        $current = $this->getCurrent();
        /** @var MockObject $filesystem */
        $filesystem = $current->filesystem;
        $filesystem->method('readStream')
            ->willThrowException(UnableToReadFile::fromLocation(self::TEST_PATH));

        $openedPath = '';
        $this->assertFalse(StreamOpenCommand::run(
            $current,
            self::TEST_PATH,
            'rb',
            0,
            $openedPath
        ));

        $this->expectError();
        $this->expectErrorMessage('Unable to read to file');
        StreamOpenCommand::run(
            $current,
            self::TEST_PATH,
            'rb',
            STREAM_REPORT_ERRORS,
            $openedPath
        );
    }

    /**
     * @dataProvider writeOnlyModeProvider
     * @dataProvider readWriteModeProvider
     */
    public function testWrite(string $mode): void
    {
        $current = $this->getCurrent();
        /** @var MockObject $filesystem */
        $filesystem = $current->filesystem;
        if ('w' !== $mode[0]) {
            $filesystem->expects($this->once())
                ->method('fileExists')
                ->with('test')
                ->willReturn(true);
            $filesystem->expects($this->once())
                ->method('readStream')
                ->with('test')
                ->willReturn(fopen(__FILE__, 'rb'));
        }

        $openedPath = '';
        $this->assertTrue(StreamOpenCommand::run(
            $current,
            self::TEST_PATH,
            $mode,
            STREAM_REPORT_ERRORS,
            $openedPath
        ));
        if (!is_resource($current->handle)) {
            $this->fail();
        }

        $position = ftell($current->handle);
        $end = filesize(__FILE__);
        if ('a' === $mode[0]) {
            $this->assertSame($end, $position);
        } else {
            $this->assertSame(0, $position);
        }

        fseek($current->handle, 0, SEEK_END);
        $position = ftell($current->handle);
        if ('w' === $mode[0]) {
            $this->assertSame(0, $position);
        } else {
            $this->assertSame($end, $position);
        }
    }

    /**
     * @dataProvider writeOnlyModeProvider
     * @dataProvider readWriteModeProvider
     */
    public function testWriteFailed(string $mode): void
    {
        if ('w' === $mode[0]) {
            $this->assertSame('w', $mode[0]);

            return;
        }

        $current = $this->getCurrent();
        /** @var MockObject $filesystem */
        $filesystem = $current->filesystem;
        $filesystem->expects($this->exactly(2))
            ->method('fileExists')
            ->with('test')
            ->willReturn(true);
        $filesystem->method('readStream')
            ->willThrowException(UnableToReadFile::fromLocation(self::TEST_PATH));

        $openedPath = '';
        $this->assertFalse(StreamOpenCommand::run(
            $current,
            self::TEST_PATH,
            $mode,
            0,
            $openedPath
        ));

        $this->expectError();
        $this->expectErrorMessage('Unable to read to file');
        StreamOpenCommand::run(
            $current,
            self::TEST_PATH,
            $mode,
            STREAM_REPORT_ERRORS,
            $openedPath
        );
    }

    /**
     * @dataProvider exclusiveWriteOnlyModeProvider
     * @dataProvider exclusiveReadWriteModeProvider
     */
    public function testExclusiveFailed(string $mode): void
    {
        $current = $this->getCurrent();
        /** @var MockObject $filesystem */
        $filesystem = $current->filesystem;
        if ('w' !== $mode[0]) {
            $filesystem->expects($this->exactly(2))
                ->method('fileExists')
                ->with('test')
                ->willReturn(true);
        }

        $openedPath = '';
        $this->assertFalse(StreamOpenCommand::run(
            $current,
            self::TEST_PATH,
            $mode,
            0,
            $openedPath
        ));

        $this->expectError();
        $this->expectErrorMessage('Unable to write to file');
        StreamOpenCommand::run(
            $current,
            self::TEST_PATH,
            $mode,
            STREAM_REPORT_ERRORS,
            $openedPath
        );
    }
}
